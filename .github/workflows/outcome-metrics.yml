name: Outcome Metrics Dashboard

on:
  schedule:
    - cron: '0 6 * * 1'  # Weekly on Mondays at 6 AM UTC
  workflow_dispatch:  # Allow manual triggers

jobs:
  generate-metrics:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Generate outcome metrics report
        uses: actions/github-script@v8
        with:
          script: |
            const { owner, repo } = context.repo;
            
            // Get all outcomes
            const outcomes = await github.rest.search.issuesAndPullRequests({
              q: `repo:${owner}/${repo} is:issue label:outcome`
            });
            
            let metricsReport = `# ðŸ“Š Outcome Metrics Report\n\n`;
            metricsReport += `*Generated: ${new Date().toISOString().split('T')[0]}*\n\n`;
            metricsReport += `## Summary\n\n`;
            metricsReport += `- **Total Outcomes**: ${outcomes.data.total_count}\n`;
            
            let completedOutcomes = 0;
            let activeOutcomes = 0;
            let plannedOutcomes = 0;
            
            for (const outcome of outcomes.data.items) {
              // Get epics for this outcome
              const epics = await github.rest.search.issuesAndPullRequests({
                q: `repo:${owner}/${repo} is:issue label:epic "Parent Outcome: #${outcome.number}"`
              });
              
              const totalEpics = epics.data.total_count;
              const closedEpics = epics.data.items.filter(epic => epic.state === 'closed').length;
              const progressPercent = totalEpics > 0 ? Math.round((closedEpics / totalEpics) * 100) : 0;
              
              if (progressPercent === 100) {
                completedOutcomes++;
              } else if (progressPercent > 0) {
                activeOutcomes++;
              } else {
                plannedOutcomes++;
              }
              
              metricsReport += `\n## ${outcome.title}\n`;
              metricsReport += `- **Progress**: ${closedEpics}/${totalEpics} epics (${progressPercent}%)\n`;
              metricsReport += `- **Status**: ${outcome.state}\n`;
              metricsReport += `- **Link**: [#${outcome.number}](${outcome.html_url})\n`;
              
              if (totalEpics > 0) {
                metricsReport += `\n### Epics Breakdown\n`;
                for (const epic of epics.data.items) {
                  const status = epic.state === 'closed' ? 'âœ…' : 'ðŸ”„';
                  metricsReport += `${status} [${epic.title}](${epic.html_url})\n`;
                }
              }
            }
            
            metricsReport += `\n## Overall Status\n`;
            metricsReport += `- **Completed**: ${completedOutcomes}\n`;
            metricsReport += `- **Active**: ${activeOutcomes}\n`;
            metricsReport += `- **Planned**: ${plannedOutcomes}\n`;
            
            // Create or update metrics issue
            try {
              const existingIssue = await github.rest.search.issuesAndPullRequests({
                q: `repo:${owner}/${repo} is:issue in:title "Outcome Metrics Dashboard"`
              });
              
              if (existingIssue.data.total_count > 0) {
                // Update existing dashboard issue
                await github.rest.issues.update({
                  owner,
                  repo,
                  issue_number: existingIssue.data.items[0].number,
                  body: metricsReport
                });
                console.log('Updated existing metrics dashboard');
              } else {
                // Create new dashboard issue
                await github.rest.issues.create({
                  owner,
                  repo,
                  title: 'ðŸ“Š Outcome Metrics Dashboard',
                  body: metricsReport,
                  labels: ['metrics', 'dashboard']
                });
                console.log('Created new metrics dashboard');
              }
            } catch (error) {
              console.error('Error managing metrics dashboard:', error);
            }