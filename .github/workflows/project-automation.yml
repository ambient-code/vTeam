name: Project Automation

on:
  issues:
    types: [opened, edited, labeled, unlabeled, closed, reopened]
  issue_comment:
    types: [created]

jobs:
  auto-add-to-project:
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && github.event.action == 'opened'
    steps:
      - name: Add issue to project
        uses: actions/add-to-project@v1.0.2
        with:
          project-url: https://github.com/orgs/red-hat-data-services/projects/12
          github-token: ${{ secrets.GITHUB_TOKEN }}

  hierarchy-validation:
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && (github.event.action == 'opened' || github.event.action == 'labeled')
    steps:
      - name: Check hierarchy labels
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo, number } = context.issue;
            const issue = await github.rest.issues.get({
              owner,
              repo,
              issue_number: number
            });
            
            const labels = issue.data.labels.map(l => l.name);
            const hasOutcome = labels.includes('outcome');
            const hasEpic = labels.includes('epic');
            const hasStory = labels.includes('story');
            
            // Validate hierarchy rules
            const hierarchyCount = [hasOutcome, hasEpic, hasStory].filter(Boolean).length;
            
            if (hierarchyCount > 1) {
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: number,
                body: '⚠️ **Hierarchy Validation**: Issues should have only one hierarchy label (outcome, epic, or story). Please remove conflicting labels.'
              });
            }
            
            // Auto-assign project fields based on hierarchy
            if (hasOutcome) {
              console.log('Outcome detected - should be added to outcome view');
            } else if (hasEpic) {
              console.log('Epic detected - should be linked to outcome');
            } else if (hasStory) {
              console.log('Story detected - should be linked to epic');
            }

  update-outcome-progress:
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && (github.event.action == 'closed' || github.event.action == 'reopened')
    steps:
      - name: Update parent outcome progress
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo, number } = context.issue;
            const issue = await github.rest.issues.get({
              owner,
              repo,
              issue_number: number
            });
            
            const labels = issue.data.labels.map(l => l.name);
            const isEpic = labels.includes('epic');
            
            if (isEpic && issue.data.body) {
              // Look for parent outcome reference in the body
              const outcomeMatch = issue.data.body.match(/\*\*Parent Outcome:\*\* #(\d+)/);
              if (outcomeMatch) {
                const outcomeNumber = parseInt(outcomeMatch[1]);
                
                // Get all epics for this outcome
                const epics = await github.rest.search.issuesAndPullRequests({
                  q: `repo:${owner}/${repo} is:issue label:epic "Parent Outcome: #${outcomeNumber}"`
                });
                
                const totalEpics = epics.data.total_count;
                const closedEpics = epics.data.items.filter(epic => epic.state === 'closed').length;
                const progressPercent = totalEpics > 0 ? Math.round((closedEpics / totalEpics) * 100) : 0;
                
                // Comment on outcome with progress update
                await github.rest.issues.createComment({
                  owner,
                  repo,
                  issue_number: outcomeNumber,
                  body: `📊 **Progress Update**: ${closedEpics}/${totalEpics} epics completed (${progressPercent}%)`
                });
              }
            }